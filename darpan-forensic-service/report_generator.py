import os
import io
import base64
import datetime
from textwrap import wrap
from reportlab.lib.pagesizes import letter
from reportlab.pdfgen import canvas
from reportlab.lib.utils import ImageReader


def build_json_report(case_id, filename, file_sha256, findings):
    """Create a unified JSON representation of the forensic report."""
    report = {
        "case_id": case_id,
        "generated_at": datetime.datetime.utcnow().isoformat() + "Z",
        "file_name": filename,
        "file_sha256": file_sha256,
        "findings": findings
    }
    return report


def build_pdf_report(report_json, out_path):
    """Generate a well-formatted PDF report with scatter visualization."""
    os.makedirs(os.path.dirname(out_path), exist_ok=True)

    c = canvas.Canvas(out_path, pagesize=letter)
    width, height = letter

    # Header
    c.setFont("Helvetica-Bold", 16)
    c.drawString(40, height - 50, "DARPAN Forensic Intelligence Report")

    c.setFont("Helvetica", 10)
    c.drawString(40, height - 70, f"Case ID: {report_json.get('case_id')}")
    c.drawString(40, height - 85, f"Generated at: {report_json.get('generated_at')}")
    c.drawString(40, height - 100, f"File: {report_json.get('file_name')}")
    c.drawString(40, height - 115, f"SHA-256: {report_json.get('file_sha256')}")

    y = height - 140
    c.setFont("Helvetica-Bold", 12)
    c.drawString(40, y, "Summary Findings:")
    y -= 20

    findings = report_json.get("findings", report_json)
    ai_section = findings.get("ai_detection", {})
    meta_section = findings.get("metadata", {})
    binwalk_section = findings.get("binwalk", "")
    scatter_section = findings.get("scatter_analysis", {})

    c.setFont("Helvetica", 10)
    c.drawString(40, y, f"AI Detection Score: {ai_section.get('ai_score', 'N/A')} (Entropy: {ai_section.get('avg_entropy', 'N/A')})")
    y -= 16
    c.drawString(40, y, f"EXIF Data: {'Present' if meta_section else 'None'}")
    y -= 16
    c.drawString(40, y, f"Binwalk: {'Embedded content found' if 'Embedded' in binwalk_section else 'None reported'}")
    y -= 24

    # Scatter Analysis Section
    c.setFont("Helvetica-Bold", 12)
    c.drawString(40, y, "Scatter Analysis:")
    y -= 20
    c.setFont("Helvetica", 9)

    entropies = scatter_section.get("entropies", {})
    correlations = scatter_section.get("correlations", {})
    syn_score = scatter_section.get("synthetic_likelihood", "N/A")

    if entropies:
        for k, v in entropies.items():
            c.drawString(60, y, f"{k}: {round(v, 4)}")
            y -= 14
    if correlations:
        for k, v in correlations.items():
            c.drawString(60, y, f"{k}: {round(v, 4)}")
            y -= 14

    c.drawString(60, y, f"Synthetic Likelihood: {syn_score}")
    y -= 24

    # Embed scatter image if available
    if scatter_section.get("scatter_image_base64"):
        try:
            img_bytes = base64.b64decode(scatter_section["scatter_image_base64"])
            img = ImageReader(io.BytesIO(img_bytes))
            img_h = 150
            img_w = 400
            if y - img_h < 100:
                c.showPage()
                y = height - 100
            c.drawImage(img, 60, y - img_h, width=img_w, height=img_h)
            y -= img_h + 20
        except Exception as e:
            c.setFont("Helvetica-Oblique", 9)
            c.drawString(60, y, f"(Failed to render scatter image: {e})")
            y -= 20

    # Metadata Section
    c.setFont("Helvetica-Bold", 12)
    c.drawString(40, y, "Metadata & Additional Findings (abridged):")
    y -= 18
    c.setFont("Helvetica", 9)

    snippet = str(meta_section)[:1000].replace("\n", " ")
    wrapped_lines = wrap(snippet, width=90)
    for line in wrapped_lines:
        if y < 60:
            c.showPage()
            y = height - 50
            c.setFont("Helvetica", 9)
        c.drawString(60, y, line)
        y -= 12

    # Footer
    c.setFont("Helvetica-Oblique", 8)
    c.drawString(40, 40, "Generated by DARPAN Forensic Suite Â© 2025")
    c.save()

    print(f"[+] PDF report saved successfully: {out_path}")
    return out_path

